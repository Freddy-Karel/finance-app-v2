"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_action-browser_src_server_queries_envelopes_ts-_4d090";
exports.ids = ["_action-browser_src_server_queries_envelopes_ts-_4d090"];
exports.modules = {

/***/ "(action-browser)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = global.__prisma ??= new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) global.__prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQVN2QyxNQUFNQyxTQUFVQyxPQUFPQyxRQUFRLEtBQUssSUFBSUgsd0RBQVlBLEdBQUk7QUFDL0QsSUFBSUksSUFBcUMsRUFBRUYsT0FBT0MsUUFBUSxHQUFHRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCQzI0MVxcTXVzaWNcXGZpbmFuY2UtYXBwLXYxLW1haW5cXGZpbmFuY2UtYXBwLXYxLW1haW5cXHNyY1xcbGliXFxwcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBFbnN1cmUgYSBzaW5nbGUgUHJpc21hQ2xpZW50IGluc3RhbmNlIGluIGRldmVsb3BtZW50IHRvIGF2b2lkIGV4aGF1c3Rpbmdcbi8vIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGR1cmluZyBITVIgKHNlZSBQcmlzbWEgZG9jcykuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIF9fcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPSAoZ2xvYmFsLl9fcHJpc21hID8/PSBuZXcgUHJpc21hQ2xpZW50KCkpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbC5fX3ByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJfX3ByaXNtYSIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/queries/envelopes.ts":
/*!*****************************************!*\
  !*** ./src/server/queries/envelopes.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllEnvelopeBalances: () => (/* binding */ getAllEnvelopeBalances),\n/* harmony export */   getBlockedEnvelopeCoverage: () => (/* binding */ getBlockedEnvelopeCoverage),\n/* harmony export */   getEnvelopeCoverageAll: () => (/* binding */ getEnvelopeCoverageAll)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(action-browser)/./src/lib/prisma.ts\");\n\nasync function getAllEnvelopeBalances() {\n    // Only consider active envelopes for balances shown in the app (dashboard, lists)\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.envelope.findMany({\n        where: {\n            active: true\n        },\n        select: {\n            id: true,\n            name: true,\n            protected: true,\n            active: true,\n            emoji: true,\n            budgetTarget: true\n        }\n    });\n    const dist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            \"envelopeId\"\n        ],\n        _sum: {\n            amount: true\n        },\n        where: {\n            transaction: {\n                kind: \"DIST\"\n            }\n        }\n    });\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            \"envelopeId\"\n        ],\n        _sum: {\n            amount: true\n        },\n        where: {\n            transaction: {\n                kind: \"OUT\"\n            }\n        }\n    });\n    const mapD = new Map(dist.map((d)=>[\n            d.envelopeId,\n            d._sum.amount ?? 0\n        ]));\n    const mapO = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    return envs.map((e)=>{\n        const inflow = mapD.get(e.id) ?? 0, outflow = mapO.get(e.id) ?? 0;\n        const total = typeof e.budgetTarget === 'number' ? e.budgetTarget : inflow;\n        const balance = total - outflow;\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            protected: e.protected,\n            active: e.active,\n            emoji: e.emoji ?? null,\n            budgetTarget: e.budgetTarget ?? null,\n            inflow,\n            outflow,\n            balance\n        };\n    });\n}\n// Retourne la couverture (en mois) des enveloppes classées \"blocked\" ou protégées.\nasync function getBlockedEnvelopeCoverage() {\n    const now = new Date();\n    const daysWindow = 90; // use last 90 days to compute average\n    const since = new Date(now.getTime() - daysWindow * 24 * 3600 * 1000);\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.envelope.findMany({\n        where: {\n            active: true,\n            OR: [\n                {\n                    protected: true\n                },\n                {\n                    classification: 'blocked'\n                }\n            ]\n        },\n        select: {\n            id: true,\n            name: true,\n            emoji: true,\n            budgetTarget: true\n        }\n    });\n    if (envs.length === 0) return [];\n    const ids = envs.map((e)=>e.id);\n    // sum of OUT amounts over the window\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT',\n                at: {\n                    gte: since\n                }\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outMap = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    // current balances using existing helper logic: inflow/outflow all-time\n    const dist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'DIST'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outsAll = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const distMap = new Map(dist.map((d)=>[\n            d.envelopeId,\n            d._sum.amount ?? 0\n        ]));\n    const outsAllMap = new Map(outsAll.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const res = envs.map((e)=>{\n        const allocated = distMap.get(e.id) ?? 0;\n        const spentAll = outsAllMap.get(e.id) ?? 0;\n        const balance = (typeof e.budgetTarget === 'number' ? e.budgetTarget : allocated) - spentAll;\n        const outLast90 = outMap.get(e.id) ?? 0;\n        const avgMonthly = outLast90 / daysWindow * 30; // approximate month\n        const months = avgMonthly > 0 ? Number((balance / avgMonthly).toFixed(1)) : balance > 0 ? Infinity : 0;\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            emoji: e.emoji ?? null,\n            balance,\n            avgMonthly: Math.round(avgMonthly),\n            monthsCoverage: months\n        };\n    });\n    return res;\n}\n// Retourne la couverture (en mois) pour toutes les enveloppes actives.\nasync function getEnvelopeCoverageAll(options) {\n    const daysWindow = options?.daysWindow ?? 90;\n    const now = new Date();\n    const since = new Date(now.getTime() - daysWindow * 24 * 3600 * 1000);\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.envelope.findMany({\n        where: {\n            active: true\n        },\n        select: {\n            id: true,\n            name: true,\n            emoji: true,\n            budgetTarget: true\n        }\n    });\n    if (envs.length === 0) return [];\n    const ids = envs.map((e)=>e.id);\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT',\n                at: {\n                    gte: since\n                }\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outMap = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const dist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'DIST'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outsAll = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const distMap = new Map(dist.map((d)=>[\n            d.envelopeId,\n            d._sum.amount ?? 0\n        ]));\n    const outsAllMap = new Map(outsAll.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const res = envs.map((e)=>{\n        const allocated = distMap.get(e.id) ?? 0;\n        const spentAll = outsAllMap.get(e.id) ?? 0;\n        const balance = (typeof e.budgetTarget === 'number' ? e.budgetTarget : allocated) - spentAll;\n        const outLast = outMap.get(e.id) ?? 0;\n        const avgMonthly = outLast / daysWindow * 30;\n        const months = avgMonthly > 0 ? Number((balance / avgMonthly).toFixed(1)) : balance > 0 ? Infinity : 0;\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            emoji: e.emoji ?? null,\n            balance,\n            avgMonthly: Math.round(avgMonthly),\n            monthsCoverage: months\n        };\n    });\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/queries/envelopes.ts\n");

/***/ })

};
;