"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_action-browser_src_server_actions_settings_ts";
exports.ids = ["_action-browser_src_server_actions_settings_ts"];
exports.modules = {

/***/ "(action-browser)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentRole: () => (/* binding */ getCurrentRole),\n/* harmony export */   requireRole: () => (/* binding */ requireRole)\n/* harmony export */ });\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(action-browser)/./node_modules/.pnpm/@clerk+nextjs@5.3.1_next@15_20ea36d09dc70bbbcc56b8a0d9ae486b/node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\nasync function getCurrentRole() {\n    if (process.env.E2E_ROLE === \"operator\" || process.env.E2E_ROLE === \"manager\" || process.env.E2E_ROLE === \"auditor\") return process.env.E2E_ROLE;\n    const { userId, sessionClaims } = (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_0__.auth)();\n    if (!userId) throw new Error(\"Unauthenticated\");\n    return sessionClaims?.role ?? \"operator\";\n}\nasync function requireRole(allowed) {\n    const role = await getCurrentRole();\n    if (!allowed.includes(role)) throw new Error(\"Forbidden\");\n    return role;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEM7QUFFckMsZUFBZUM7SUFDcEIsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssY0FBY0YsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssYUFBYUYsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssV0FBVyxPQUFPRixRQUFRQyxHQUFHLENBQUNDLFFBQVE7SUFDaEosTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHTiwwREFBSUE7SUFBSSxJQUFJLENBQUNLLFFBQVEsTUFBTSxJQUFJRSxNQUFNO0lBQ3ZFLE9BQU8sZUFBZ0JDLFFBQTZCO0FBQ3REO0FBQ08sZUFBZUMsWUFBWUMsT0FBZTtJQUFJLE1BQU1GLE9BQU8sTUFBTVA7SUFBa0IsSUFBSSxDQUFDUyxRQUFRQyxRQUFRLENBQUNILE9BQU8sTUFBTSxJQUFJRCxNQUFNO0lBQWMsT0FBT0M7QUFBTSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCQzI0MVxcTXVzaWNcXGZpbmFuY2UtYXBwLXYxLW1haW5cXGZpbmFuY2UtYXBwLXYxLW1haW5cXHNyY1xcbGliXFxhdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF1dGggfSBmcm9tIFwiQGNsZXJrL25leHRqcy9zZXJ2ZXJcIjtcbmV4cG9ydCB0eXBlIFJvbGUgPSBcIm9wZXJhdG9yXCIgfCBcIm1hbmFnZXJcIiB8IFwiYXVkaXRvclwiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEN1cnJlbnRSb2xlKCk6IFByb21pc2U8Um9sZT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuRTJFX1JPTEUgPT09IFwib3BlcmF0b3JcIiB8fCBwcm9jZXNzLmVudi5FMkVfUk9MRSA9PT0gXCJtYW5hZ2VyXCIgfHwgcHJvY2Vzcy5lbnYuRTJFX1JPTEUgPT09IFwiYXVkaXRvclwiKSByZXR1cm4gcHJvY2Vzcy5lbnYuRTJFX1JPTEUgYXMgUm9sZTtcbiAgY29uc3QgeyB1c2VySWQsIHNlc3Npb25DbGFpbXMgfSA9IGF1dGgoKTsgaWYgKCF1c2VySWQpIHRocm93IG5ldyBFcnJvcihcIlVuYXV0aGVudGljYXRlZFwiKTtcbiAgcmV0dXJuIChzZXNzaW9uQ2xhaW1zPy5yb2xlIGFzIFJvbGUgfCB1bmRlZmluZWQpID8/IFwib3BlcmF0b3JcIjtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1aXJlUm9sZShhbGxvd2VkOiBSb2xlW10pIHsgY29uc3Qgcm9sZSA9IGF3YWl0IGdldEN1cnJlbnRSb2xlKCk7IGlmICghYWxsb3dlZC5pbmNsdWRlcyhyb2xlKSkgdGhyb3cgbmV3IEVycm9yKFwiRm9yYmlkZGVuXCIpOyByZXR1cm4gcm9sZTsgfVxuIl0sIm5hbWVzIjpbImF1dGgiLCJnZXRDdXJyZW50Um9sZSIsInByb2Nlc3MiLCJlbnYiLCJFMkVfUk9MRSIsInVzZXJJZCIsInNlc3Npb25DbGFpbXMiLCJFcnJvciIsInJvbGUiLCJyZXF1aXJlUm9sZSIsImFsbG93ZWQiLCJpbmNsdWRlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(action-browser)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = global.__prisma ??= new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) global.__prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQVN2QyxNQUFNQyxTQUFVQyxPQUFPQyxRQUFRLEtBQUssSUFBSUgsd0RBQVlBLEdBQUk7QUFDL0QsSUFBSUksSUFBcUMsRUFBRUYsT0FBT0MsUUFBUSxHQUFHRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCQzI0MVxcTXVzaWNcXGZpbmFuY2UtYXBwLXYxLW1haW5cXGZpbmFuY2UtYXBwLXYxLW1haW5cXHNyY1xcbGliXFxwcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBFbnN1cmUgYSBzaW5nbGUgUHJpc21hQ2xpZW50IGluc3RhbmNlIGluIGRldmVsb3BtZW50IHRvIGF2b2lkIGV4aGF1c3Rpbmdcbi8vIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGR1cmluZyBITVIgKHNlZSBQcmlzbWEgZG9jcykuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIF9fcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPSAoZ2xvYmFsLl9fcHJpc21hID8/PSBuZXcgUHJpc21hQ2xpZW50KCkpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbC5fX3ByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJfX3ByaXNtYSIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/actions/settings.ts":
/*!****************************************!*\
  !*** ./src/server/actions/settings.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applySuggestedPercents: () => (/* binding */ applySuggestedPercents),\n/* harmony export */   createLowCoverageAnomalies: () => (/* binding */ createLowCoverageAnomalies),\n/* harmony export */   deleteEnvelope: () => (/* binding */ deleteEnvelope),\n/* harmony export */   deleteRecurringCharge: () => (/* binding */ deleteRecurringCharge),\n/* harmony export */   deleteService: () => (/* binding */ deleteService),\n/* harmony export */   forceDeleteEnvelope: () => (/* binding */ forceDeleteEnvelope),\n/* harmony export */   getActiveRule: () => (/* binding */ getActiveRule),\n/* harmony export */   getOnboardingRevenue: () => (/* binding */ getOnboardingRevenue),\n/* harmony export */   listEnvelopes: () => (/* binding */ listEnvelopes),\n/* harmony export */   listRecurringCharges: () => (/* binding */ listRecurringCharges),\n/* harmony export */   listRulesHistory: () => (/* binding */ listRulesHistory),\n/* harmony export */   listServices: () => (/* binding */ listServices),\n/* harmony export */   logEnvelopeRestore: () => (/* binding */ logEnvelopeRestore),\n/* harmony export */   proposePercentAdjustments: () => (/* binding */ proposePercentAdjustments),\n/* harmony export */   recommendPercentages: () => (/* binding */ recommendPercentages),\n/* harmony export */   setOnboardingRevenue: () => (/* binding */ setOnboardingRevenue),\n/* harmony export */   toggleEnvelopeActive: () => (/* binding */ toggleEnvelopeActive),\n/* harmony export */   toggleEnvelopeProtected: () => (/* binding */ toggleEnvelopeProtected),\n/* harmony export */   toggleService: () => (/* binding */ toggleService),\n/* harmony export */   updateDistributionRule: () => (/* binding */ updateDistributionRule),\n/* harmony export */   upsertEnvelope: () => (/* binding */ upsertEnvelope),\n/* harmony export */   upsertRecurringCharge: () => (/* binding */ upsertRecurringCharge),\n/* harmony export */   upsertService: () => (/* binding */ upsertService)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-server-reference */ \"(action-browser)/./node_modules/.pnpm/next@15.0.3_@playwright+tes_c0fbebec67a33fb30e42c14d3a81a9d2/node_modules/next/dist/build/webpack/loaders/next-flight-loader/server-reference.js\");\n/* harmony import */ var private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! private-next-rsc-action-encryption */ \"(action-browser)/./node_modules/.pnpm/next@15.0.3_@playwright+tes_c0fbebec67a33fb30e42c14d3a81a9d2/node_modules/next/dist/server/app-render/encryption.js\");\n/* harmony import */ var private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(action-browser)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/auth */ \"(action-browser)/./src/lib/auth.ts\");\n/* harmony import */ var _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/server/validators/settings */ \"(action-browser)/./src/server/validators/settings.ts\");\n/* harmony import */ var _server_queries_rules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/server/queries/rules */ \"(action-browser)/./src/server/queries/rules.ts\");\n/* harmony import */ var private_next_rsc_action_validate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! private-next-rsc-action-validate */ \"(action-browser)/./node_modules/.pnpm/next@15.0.3_@playwright+tes_c0fbebec67a33fb30e42c14d3a81a9d2/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-validate.js\");\n/* __next_internal_action_entry_do_not_use__ {\"0021db5e53f057fa5285fa61eb122de43521309a70\":\"listRecurringCharges\",\"00285d3e0fe2f3fd7ab1d76d45ae92a6d3af321ecf\":\"getActiveRule\",\"002a6e7f1b779daf1f44ed72138eddd7254418b6bb\":\"listServices\",\"0051a19091a951a216b51904d9c3dab2f2f5021b8b\":\"listEnvelopes\",\"006721f8d912c966639902061586cc61825869bf2c\":\"listRulesHistory\",\"00f376cccb2a45215a6478116fa0a238715c4d5bcd\":\"getOnboardingRevenue\",\"400a33b648a9c28d07e3153e6187e93dcf9ba143ab\":\"updateDistributionRule\",\"4012db82894eccc38b6fc7e848d79057c94cfd3c51\":\"proposePercentAdjustments\",\"4012f0df1643422bd2fd4f82c4ed7c55da586130ed\":\"toggleEnvelopeProtected\",\"4015e187aae7a6cc42b510689ea88ce6035e11d219\":\"createLowCoverageAnomalies\",\"4024693c7cb7e134207a2bcc5dda918de101c39cc4\":\"deleteEnvelope\",\"403aca15f825a1022e7919cbdbc0e6327efc899328\":\"upsertRecurringCharge\",\"403b6aa430d6c10007353a86511d49dbd174081b36\":\"setOnboardingRevenue\",\"404da9fd7b11c98c9b5f5fe984ceebdca662c78b42\":\"upsertService\",\"404f9cac372e10b8da7ab462c63703f1a7b248158b\":\"upsertEnvelope\",\"405ec2c0a22e6c6f3c16a4906fd7159e21bf081bcb\":\"applySuggestedPercents\",\"4075baccfd005f5ddbc79d01dad8a9d59d7d7a0462\":\"deleteRecurringCharge\",\"40767e5c0b3a8b515556cbc71a67070cc0b0d73de5\":\"toggleEnvelopeActive\",\"407ac3a73921f286404dbcc54888f2d48443d48d0a\":\"logEnvelopeRestore\",\"408263642f207856aa00b6435ede4afeded0887eef\":\"deleteService\",\"40864a4bccf995a6dd2c955d0e53d980212955503e\":\"recommendPercentages\",\"40cd38c72f2311e888e4f0d0be6ea2d20747e63ad4\":\"forceDeleteEnvelope\",\"40f044e85fba3443810d1fd684ed4cc2f23394658b\":\"toggleService\"} */ \n\n\n\n\n\nasync function updateDistributionRule(items) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const parsed = _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__.UpdateDistributionRuleSchema.safeParse({\n        items\n    });\n    if (!parsed.success) throw new Error(parsed.error.errors.map((e)=>e.message).join(\"; \"));\n    const ids = parsed.data.items.map((i)=>i.envelopeId);\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findMany({\n        where: {\n            id: {\n                in: ids\n            }\n        }\n    });\n    if (envs.length !== ids.length) throw new Error(\"Certaines enveloppes n'existent pas\");\n    if (envs.some((e)=>!e.active)) throw new Error(\"Certaines enveloppes sont inactives\");\n    const now = new Date();\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.distributionRule.updateMany({\n        where: {\n            startsAt: {\n                lte: now\n            },\n            OR: [\n                {\n                    endsAt: null\n                },\n                {\n                    endsAt: {\n                        gt: now\n                    }\n                }\n            ]\n        },\n        data: {\n            endsAt: now\n        }\n    });\n    const rule = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.distributionRule.create({\n        data: {\n            startsAt: now\n        }\n    });\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.distributionRuleItem.createMany({\n        data: parsed.data.items.map((i)=>({\n                ruleId: rule.id,\n                envelopeId: i.envelopeId,\n                percent: i.percent\n            }))\n    });\n    return {\n        ruleId: rule.id\n    };\n}\nasync function listEnvelopes() {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\",\n        \"auditor\"\n    ]);\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findMany({\n        orderBy: {\n            createdAt: \"asc\"\n        }\n    });\n}\nasync function listRecurringCharges() {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\",\n        \"auditor\"\n    ]);\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.recurringCharge.findMany({\n        orderBy: {\n            createdAt: \"asc\"\n        }\n    });\n}\nasync function upsertRecurringCharge(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const p = input;\n    const data = {\n        name: p.name,\n        amount: p.amount,\n        frequency: p.frequency ?? 'monthly',\n        envelopeId: p.envelopeId ?? null\n    };\n    if (p.id) return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.recurringCharge.update({\n        where: {\n            id: p.id\n        },\n        data\n    });\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.recurringCharge.create({\n        data\n    });\n}\nasync function deleteRecurringCharge(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const { id } = input;\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.recurringCharge.delete({\n        where: {\n            id\n        }\n    });\n}\nasync function listServices() {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\",\n        \"auditor\"\n    ]);\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.service.findMany({\n        orderBy: {\n            createdAt: \"asc\"\n        }\n    });\n}\nasync function getActiveRule() {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\",\n        \"auditor\"\n    ]);\n    const r = await (0,_server_queries_rules__WEBPACK_IMPORTED_MODULE_5__.getActiveDistributionRule)();\n    if (!r) return null;\n    return {\n        id: r.id,\n        startsAt: r.startsAt,\n        endsAt: r.endsAt ?? null,\n        items: r.items.map((i)=>({\n                envelopeId: i.envelopeId,\n                percent: i.percent,\n                envelopeName: i.envelope.name\n            }))\n    };\n}\nasync function listRulesHistory() {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\",\n        \"auditor\"\n    ]);\n    const rs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.distributionRule.findMany({\n        include: {\n            items: {\n                include: {\n                    envelope: true\n                }\n            }\n        },\n        orderBy: {\n            startsAt: \"desc\"\n        }\n    });\n    return rs.map((r)=>({\n            id: r.id,\n            startsAt: r.startsAt,\n            endsAt: r.endsAt ?? null,\n            items: r.items.map((i)=>({\n                    envelopeId: i.envelopeId,\n                    percent: i.percent,\n                    envelopeName: i.envelope.name\n                }))\n        }));\n}\nasync function upsertEnvelope(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const p = _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__.UpsertEnvelopeSchema.safeParse(input);\n    if (!p.success) throw new Error(p.error.errors.map((e)=>e.message).join(\"; \"));\n    const data = {\n        name: p.data.name,\n        emoji: p.data.emoji ?? null,\n        protected: p.data.protected ?? false,\n        active: p.data.active ?? true\n    };\n    data.budgetTarget = p.data.budgetTarget ?? null;\n    if (p.data.id) return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.update({\n        where: {\n            id: p.data.id\n        },\n        data\n    });\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.create({\n        data\n    });\n}\nasync function toggleEnvelopeActive(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const p = _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__.ToggleEnvelopeActiveSchema.safeParse(input);\n    if (!p.success) throw new Error(p.error.errors.map((e)=>e.message).join(\"; \"));\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.update({\n        where: {\n            id: p.data.id\n        },\n        data: {\n            active: p.data.active\n        }\n    });\n}\nasync function toggleEnvelopeProtected(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const p = _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__.ToggleEnvelopeProtectedSchema.safeParse(input);\n    if (!p.success) throw new Error(p.error.errors.map((e)=>e.message).join(\"; \"));\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.update({\n        where: {\n            id: p.data.id\n        },\n        data: {\n            protected: p.data.protected\n        }\n    });\n}\nasync function upsertService(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const p = _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__.UpsertServiceSchema.safeParse(input);\n    if (!p.success) throw new Error(p.error.errors.map((e)=>e.message).join(\"; \"));\n    const data = {\n        name: p.data.name,\n        active: p.data.active ?? true\n    };\n    if (p.data.id) return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.service.update({\n        where: {\n            id: p.data.id\n        },\n        data\n    });\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.service.create({\n        data\n    });\n}\nasync function toggleService(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const p = _server_validators_settings__WEBPACK_IMPORTED_MODULE_4__.ToggleServiceSchema.safeParse(input);\n    if (!p.success) throw new Error(p.error.errors.map((e)=>e.message).join(\"; \"));\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.service.update({\n        where: {\n            id: p.data.id\n        },\n        data: {\n            active: p.data.active\n        }\n    });\n}\nasync function deleteService(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const { id } = input;\n    const exists = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.service.findUnique({\n        where: {\n            id\n        }\n    });\n    if (!exists) throw new Error('Service introuvable');\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.service.delete({\n        where: {\n            id\n        }\n    });\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.auditLog.create({\n        data: {\n            action: 'service.delete',\n            metaJson: JSON.stringify({\n                id,\n                name: exists.name\n            })\n        }\n    });\n    return {\n        ok: true\n    };\n}\n// ChargeType CRUD supprimé — plus de modèle séparé pour les types\nasync function deleteEnvelope(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const { id } = input;\n    // Interdire suppression si des allocations existent\n    const allocCount = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transactionAllocation.count({\n        where: {\n            envelopeId: id\n        }\n    });\n    const ruleRefCount = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.distributionRuleItem.count({\n        where: {\n            envelopeId: id\n        }\n    });\n    // Best practice: do NOT force-delete envelopes that have historical allocations or are referenced by rules.\n    // Instead, disable the envelope so data integrity is preserved while removing it from active use.\n    if (allocCount > 0 || ruleRefCount > 0) {\n        // Mark as inactive (soft-delete) and return an informative result for the caller\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.update({\n            where: {\n                id\n            },\n            data: {\n                active: false\n            }\n        });\n        return {\n            ok: false,\n            deactivated: true,\n            message: \"Enveloppe désactivée car liée à des allocations ou à une règle (préservation historique).\"\n        };\n    }\n    // If no historical links, allow real deletion\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.delete({\n        where: {\n            id\n        }\n    });\n    return {\n        ok: true,\n        deleted: true\n    };\n}\nasync function forceDeleteEnvelope(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const { id } = input;\n    const exists = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findUnique({\n        where: {\n            id\n        }\n    });\n    if (!exists) throw new Error(\"Enveloppe introuvable\");\n    // Delete allocations and any distribution rule items referencing it\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transactionAllocation.deleteMany({\n        where: {\n            envelopeId: id\n        }\n    });\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.distributionRuleItem.deleteMany({\n        where: {\n            envelopeId: id\n        }\n    });\n    // Delete the envelope itself\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.delete({\n        where: {\n            id\n        }\n    });\n    // Log an anomaly to record the destructive action\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.anomaly.create({\n        data: {\n            level: 'info',\n            code: 'ENVELOPE_FORCE_DELETED',\n            details: `Envelope ${exists.name} (${id}) permanently deleted by manager`\n        }\n    });\n    return {\n        ok: true,\n        deleted: true\n    };\n}\n// Calcule des pourcentages recommandés à partir d'un revenu total (preview only)\nasync function recommendPercentages(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const amount = Number(input.amount || 0);\n    if (!Number.isFinite(amount) || amount <= 0) throw new Error(\"Montant de revenu invalide\");\n    const imprevusPct = typeof input.imprevusPercent === 'number' ? Number(input.imprevusPercent) : 10;\n    // Ensure an 'Imprévus' envelope exists before computations\n    await ensureImprevusEnvelope();\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findMany({\n        where: {\n            active: true\n        }\n    });\n    // include recurring charges (normalized to monthly) to be considered as blocked-like obligations\n    const recs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.recurringCharge.findMany({\n        where: {\n            envelopeId: {\n                in: envs.map((e)=>e.id)\n            }\n        }\n    });\n    const recMap = new Map();\n    recs.forEach((r)=>{\n        let monthly = Number(r.amount || 0);\n        if (r.frequency === 'weekly') monthly = Math.round(monthly * 4.345); // weeks to month\n        if (r.frequency === 'yearly') monthly = Math.round(monthly / 12);\n        if (r.envelopeId) recMap.set(r.envelopeId, (recMap.get(r.envelopeId) || 0) + monthly);\n    });\n    // identify imprevus envelope\n    const imprevus = envs.find((e)=>(e.name || '').toLowerCase().includes('imprev') || (e.name || '').toLowerCase().includes('imprévu'));\n    const totalRevenue = amount;\n    let allocated = 0;\n    const results = [];\n    // allocate imprevus first\n    if (imprevus) {\n        const imprevusAmount = Math.round(totalRevenue * (imprevusPct / 100));\n        allocated += imprevusAmount;\n        results.push({\n            envelopeId: imprevus.id,\n            name: imprevus.name,\n            amount: imprevusAmount,\n            percent: +(100 * imprevusAmount / totalRevenue).toFixed(2)\n        });\n    }\n    // blocked envelopes: those marked protected or classified as 'blocked'\n    const blocked = envs.filter((e)=>e.protected === true || e.classification === 'blocked').filter((e)=>!imprevus || e.id !== imprevus.id);\n    // allocate budgetTargets for blocked if present\n    for (const b of blocked){\n        const budgetAmt = b.budgetTarget ? Number(b.budgetTarget) : 0;\n        const recAmt = recMap.get(b.id) ?? 0;\n        const amt = budgetAmt + recAmt;\n        allocated += amt;\n        results.push({\n            envelopeId: b.id,\n            name: b.name,\n            amount: amt,\n            percent: +(100 * amt / totalRevenue).toFixed(2)\n        });\n    }\n    // remaining for flex envelopes\n    const flex = envs.filter((e)=>!(e.protected === true || e.classification === 'blocked')).filter((e)=>!imprevus || e.id !== imprevus.id);\n    const remaining = Math.max(0, totalRevenue - allocated);\n    // weights: budgetTarget if present else 1\n    const weights = flex.map((f)=>f.budgetTarget ? Number(f.budgetTarget) : 1);\n    const weightSum = weights.reduce((s, w)=>s + w, 0) || 1;\n    flex.forEach((f, idx)=>{\n        const amt = Math.round(remaining * (weights[idx] / weightSum));\n        results.push({\n            envelopeId: f.id,\n            name: f.name,\n            amount: amt,\n            percent: +(100 * amt / totalRevenue).toFixed(2)\n        });\n    });\n    // normalize rounding differences: ensure sum of amounts equals totalRevenue\n    const sumAllocated = results.reduce((s, r)=>s + Number(r.amount || 0), 0);\n    const diff = totalRevenue - sumAllocated;\n    if (diff !== 0 && results.length) {\n        results[0].amount = Number(results[0].amount) + diff;\n        results[0].percent = +(100 * results[0].amount / totalRevenue).toFixed(2);\n    }\n    return results;\n}\n// Applique les pourcentages recommandés (met à jour Envelope.defaultPercent)\nasync function setOnboardingRevenue(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const rec = await recommendPercentages({\n        amount: input.amount,\n        imprevusPercent: input.imprevusPercent\n    });\n    // persist defaultPercent per envelope\n    const tx = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.$transaction(rec.map((r)=>_lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.update({\n            where: {\n                id: r.envelopeId\n            },\n            data: {\n                defaultPercent: Number(Number(r.percent).toFixed(2))\n            }\n        })));\n    // audit log\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.auditLog.create({\n        data: {\n            action: 'setOnboardingRevenue',\n            metaJson: JSON.stringify({\n                amount: input.amount,\n                user: input.user ?? null,\n                applied: rec.length\n            })\n        }\n    });\n    return {\n        ok: true,\n        applied: rec.length,\n        recommendations: rec\n    };\n}\n// Analyse historique et propose des ajustements de pourcentages par enveloppe\nasync function proposePercentAdjustments(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const months = input?.months ?? 3;\n    const now = new Date();\n    const since = new Date(now.getFullYear(), now.getMonth() - months, now.getDate());\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findMany({\n        where: {\n            active: true\n        },\n        select: {\n            id: true,\n            name: true,\n            defaultPercent: true,\n            protected: true\n        }\n    });\n    const ids = envs.map((e)=>e.id);\n    if (ids.length === 0) return [];\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT',\n                at: {\n                    gte: since\n                }\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const totalOut = outs.reduce((s, o)=>s + (o._sum.amount ?? 0), 0);\n    const outMap = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const recommendations = envs.map((e)=>{\n        const outVal = outMap.get(e.id) ?? 0;\n        const observedPct = totalOut > 0 ? outVal / totalOut * 100 : 0;\n        // If envelope is protected, ensure suggested is at least current default\n        const suggested = e.protected ? Math.max(e.defaultPercent ?? 0, Number(observedPct.toFixed(2))) : Number(observedPct.toFixed(2));\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            observedPercent: Number(observedPct.toFixed(2)),\n            suggestedPercent: Number(suggested.toFixed(2)),\n            currentDefault: e.defaultPercent ?? null\n        };\n    }).sort((a, b)=>b.suggestedPercent - a.suggestedPercent);\n    return {\n        months,\n        totalOut,\n        recommendations\n    };\n}\nasync function applySuggestedPercents(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const tx = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.$transaction(input.items.map((it)=>_lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.update({\n            where: {\n                id: it.envelopeId\n            },\n            data: {\n                defaultPercent: Number(Number(it.percent).toFixed(2))\n            }\n        })));\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.auditLog.create({\n        data: {\n            action: 'applySuggestedPercents',\n            metaJson: JSON.stringify({\n                count: input.items.length,\n                user: input.user ?? null\n            })\n        }\n    });\n    return {\n        ok: true,\n        applied: input.items.length\n    };\n}\n// Crée des anomalies pour les enveloppes dont la couverture (mois) est inférieure au seuil\nasync function createLowCoverageAnomalies(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\",\n        \"operator\"\n    ]);\n    const threshold = input?.thresholdMonths ?? 2;\n    // reuse coverage helper\n    const { getEnvelopeCoverageAll } = await __webpack_require__.e(/*! import() */ \"_action-browser_src_server_queries_envelopes_ts-_4d091\").then(__webpack_require__.bind(__webpack_require__, /*! @/server/queries/envelopes */ \"(action-browser)/./src/server/queries/envelopes.ts\"));\n    const covs = await getEnvelopeCoverageAll({\n        daysWindow: 90\n    });\n    const low = covs.filter((c)=>c.monthsCoverage !== Infinity && c.monthsCoverage < threshold);\n    let created = 0;\n    for (const c of low){\n        // avoid duplicate open anomaly with same code\n        const existing = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.anomaly.findFirst({\n            where: {\n                code: 'LOW_COVERAGE',\n                details: {\n                    contains: c.envelopeId\n                },\n                resolvedAt: null\n            }\n        });\n        if (existing) continue;\n        // create anomaly + audit log (Slack notifications removed)\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.anomaly.create({\n            data: {\n                level: 'warning',\n                code: 'LOW_COVERAGE',\n                details: `Enveloppe ${c.name} (${c.envelopeId}) couverture faible: ${c.monthsCoverage} mois`\n            }\n        });\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.auditLog.create({\n            data: {\n                action: 'anomaly.create',\n                metaJson: JSON.stringify({\n                    envelopeId: c.envelopeId,\n                    name: c.name,\n                    monthsCoverage: c.monthsCoverage\n                })\n            }\n        });\n        created++;\n    }\n    return {\n        ok: true,\n        created\n    };\n}\nasync function logEnvelopeRestore(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"manager\"\n    ]);\n    const { id, user } = input;\n    const env = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findUnique({\n        where: {\n            id\n        }\n    });\n    if (!env) throw new Error(\"Enveloppe introuvable\");\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.anomaly.create({\n        data: {\n            level: 'info',\n            code: 'ENVELOPE_RESTORED',\n            details: `Envelope ${env.name} (${id}) restored by ${user ?? 'unknown'}`\n        }\n    });\n    return {\n        ok: true\n    };\n}\nasync function getOnboardingRevenue() {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\",\n        \"auditor\"\n    ]);\n    // read last auditLog entry for setOnboardingRevenue\n    const row = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.auditLog.findFirst({\n        where: {\n            action: 'setOnboardingRevenue'\n        },\n        orderBy: {\n            createdAt: 'desc'\n        }\n    });\n    if (!row) return {\n        amount: null\n    };\n    try {\n        const meta = JSON.parse(row.metaJson || '{}');\n        return {\n            amount: Number(meta.amount) || null,\n            applied: meta.applied || 0,\n            user: meta.user ?? null,\n            at: row.createdAt\n        };\n    } catch (e) {\n        return {\n            amount: null\n        };\n    }\n}\nasync function ensureImprevusEnvelope() {\n    const nameCandidates = [\n        'imprevus',\n        'imprévu',\n        'imprevu',\n        'buffer',\n        'reserve'\n    ];\n    // SQLite does not support `mode: 'insensitive'` in contains; fallback to simple contains\n    const existing = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findFirst({\n        where: {\n            OR: nameCandidates.map((n)=>({\n                    name: {\n                        contains: n\n                    }\n                }))\n        }\n    });\n    if (existing) return existing;\n    return await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.create({\n        data: {\n            name: 'Imprévus',\n            emoji: '🧰',\n            protected: false,\n            active: true,\n            budgetTarget: null\n        }\n    });\n}\n\n(0,private_next_rsc_action_validate__WEBPACK_IMPORTED_MODULE_6__.ensureServerEntryExports)([\n    updateDistributionRule,\n    listEnvelopes,\n    listRecurringCharges,\n    upsertRecurringCharge,\n    deleteRecurringCharge,\n    listServices,\n    getActiveRule,\n    listRulesHistory,\n    upsertEnvelope,\n    toggleEnvelopeActive,\n    toggleEnvelopeProtected,\n    upsertService,\n    toggleService,\n    deleteService,\n    deleteEnvelope,\n    forceDeleteEnvelope,\n    recommendPercentages,\n    setOnboardingRevenue,\n    proposePercentAdjustments,\n    applySuggestedPercents,\n    createLowCoverageAnomalies,\n    logEnvelopeRestore,\n    getOnboardingRevenue\n]);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(updateDistributionRule, \"400a33b648a9c28d07e3153e6187e93dcf9ba143ab\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(listEnvelopes, \"0051a19091a951a216b51904d9c3dab2f2f5021b8b\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(listRecurringCharges, \"0021db5e53f057fa5285fa61eb122de43521309a70\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(upsertRecurringCharge, \"403aca15f825a1022e7919cbdbc0e6327efc899328\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(deleteRecurringCharge, \"4075baccfd005f5ddbc79d01dad8a9d59d7d7a0462\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(listServices, \"002a6e7f1b779daf1f44ed72138eddd7254418b6bb\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(getActiveRule, \"00285d3e0fe2f3fd7ab1d76d45ae92a6d3af321ecf\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(listRulesHistory, \"006721f8d912c966639902061586cc61825869bf2c\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(upsertEnvelope, \"404f9cac372e10b8da7ab462c63703f1a7b248158b\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(toggleEnvelopeActive, \"40767e5c0b3a8b515556cbc71a67070cc0b0d73de5\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(toggleEnvelopeProtected, \"4012f0df1643422bd2fd4f82c4ed7c55da586130ed\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(upsertService, \"404da9fd7b11c98c9b5f5fe984ceebdca662c78b42\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(toggleService, \"40f044e85fba3443810d1fd684ed4cc2f23394658b\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(deleteService, \"408263642f207856aa00b6435ede4afeded0887eef\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(deleteEnvelope, \"4024693c7cb7e134207a2bcc5dda918de101c39cc4\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(forceDeleteEnvelope, \"40cd38c72f2311e888e4f0d0be6ea2d20747e63ad4\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(recommendPercentages, \"40864a4bccf995a6dd2c955d0e53d980212955503e\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(setOnboardingRevenue, \"403b6aa430d6c10007353a86511d49dbd174081b36\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(proposePercentAdjustments, \"4012db82894eccc38b6fc7e848d79057c94cfd3c51\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(applySuggestedPercents, \"405ec2c0a22e6c6f3c16a4906fd7159e21bf081bcb\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(createLowCoverageAnomalies, \"4015e187aae7a6cc42b510689ea88ce6035e11d219\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(logEnvelopeRestore, \"407ac3a73921f286404dbcc54888f2d48443d48d0a\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(getOnboardingRevenue, \"00f376cccb2a45215a6478116fa0a238715c4d5bcd\", null);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/actions/settings.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/queries/rules.ts":
/*!*************************************!*\
  !*** ./src/server/queries/rules.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeProposal: () => (/* binding */ computeProposal),\n/* harmony export */   getActiveDistributionRule: () => (/* binding */ getActiveDistributionRule)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(action-browser)/./src/lib/prisma.ts\");\n\nasync function getActiveDistributionRule() {\n    const now = new Date();\n    return _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.distributionRule.findFirst({\n        where: {\n            startsAt: {\n                lte: now\n            },\n            OR: [\n                {\n                    endsAt: null\n                },\n                {\n                    endsAt: {\n                        gt: now\n                    }\n                }\n            ]\n        },\n        include: {\n            items: {\n                include: {\n                    envelope: true\n                }\n            }\n        },\n        orderBy: {\n            startsAt: \"desc\"\n        }\n    });\n}\nfunction computeProposal(onHand, items) {\n    const res = items.map((i)=>({\n            envelopeId: i.envelopeId,\n            name: i.envelopeName,\n            percent: i.percent,\n            suggestedAmount: Math.floor(onHand * i.percent / 100)\n        }));\n    const sum = res.reduce((s, r)=>s + r.suggestedAmount, 0);\n    let diff = onHand - sum, idx = 0;\n    while(diff > 0 && res.length){\n        res[idx % res.length].suggestedAmount++;\n        idx++;\n        diff--;\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9zZXJ2ZXIvcXVlcmllcy9ydWxlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFDL0IsZUFBZUM7SUFDcEIsTUFBTUMsTUFBSSxJQUFJQztJQUNkLE9BQU9ILCtDQUFNQSxDQUFDSSxnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDO1FBQUVDLE9BQU07WUFBRUMsVUFBUztnQkFBQ0MsS0FBSU47WUFBRztZQUFHTyxJQUFHO2dCQUFDO29CQUFDQyxRQUFPO2dCQUFJO2dCQUFFO29CQUFDQSxRQUFPO3dCQUFDQyxJQUFHVDtvQkFBRztnQkFBQzthQUFFO1FBQUM7UUFBR1UsU0FBUTtZQUFFQyxPQUFNO2dCQUFFRCxTQUFRO29CQUFFRSxVQUFTO2dCQUFLO1lBQUU7UUFBRTtRQUFHQyxTQUFRO1lBQUVSLFVBQVM7UUFBTztJQUFFO0FBQzlMO0FBQ08sU0FBU1MsZ0JBQWdCQyxNQUFhLEVBQUVKLEtBQThEO0lBQzNHLE1BQU1LLE1BQUlMLE1BQU1NLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBSTtZQUFFQyxZQUFXRCxFQUFFQyxVQUFVO1lBQUVDLE1BQUtGLEVBQUVHLFlBQVk7WUFBRUMsU0FBUUosRUFBRUksT0FBTztZQUFFQyxpQkFBaUJDLEtBQUtDLEtBQUssQ0FBQ1YsU0FBT0csRUFBRUksT0FBTyxHQUFDO1FBQUs7SUFDN0ksTUFBTUksTUFBSVYsSUFBSVcsTUFBTSxDQUFDLENBQUNDLEdBQUVDLElBQUlELElBQUVDLEVBQUVOLGVBQWUsRUFBQztJQUFJLElBQUlPLE9BQUtmLFNBQU9XLEtBQUtLLE1BQUk7SUFDN0UsTUFBTUQsT0FBSyxLQUFLZCxJQUFJZ0IsTUFBTSxDQUFDO1FBQUVoQixHQUFHLENBQUNlLE1BQUlmLElBQUlnQixNQUFNLENBQUMsQ0FBQ1QsZUFBZTtRQUFJUTtRQUFPRDtJQUFRO0lBQ25GLE9BQU9kO0FBQ1QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQkMyNDFcXE11c2ljXFxmaW5hbmNlLWFwcC12MS1tYWluXFxmaW5hbmNlLWFwcC12MS1tYWluXFxzcmNcXHNlcnZlclxccXVlcmllc1xccnVsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIkAvbGliL3ByaXNtYVwiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2ZURpc3RyaWJ1dGlvblJ1bGUoKXtcbiAgY29uc3Qgbm93PW5ldyBEYXRlKCk7XG4gIHJldHVybiBwcmlzbWEuZGlzdHJpYnV0aW9uUnVsZS5maW5kRmlyc3QoeyB3aGVyZTp7IHN0YXJ0c0F0OntsdGU6bm93fSwgT1I6W3tlbmRzQXQ6bnVsbH0se2VuZHNBdDp7Z3Q6bm93fX1dIH0sIGluY2x1ZGU6eyBpdGVtczp7IGluY2x1ZGU6eyBlbnZlbG9wZTp0cnVlIH0gfSB9LCBvcmRlckJ5Onsgc3RhcnRzQXQ6XCJkZXNjXCIgfSB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlUHJvcG9zYWwob25IYW5kOm51bWJlciwgaXRlbXM6e2VudmVsb3BlSWQ6c3RyaW5nO3BlcmNlbnQ6bnVtYmVyO2VudmVsb3BlTmFtZTpzdHJpbmd9W10pe1xuICBjb25zdCByZXM9aXRlbXMubWFwKGk9Pih7IGVudmVsb3BlSWQ6aS5lbnZlbG9wZUlkLCBuYW1lOmkuZW52ZWxvcGVOYW1lLCBwZXJjZW50OmkucGVyY2VudCwgc3VnZ2VzdGVkQW1vdW50OiBNYXRoLmZsb29yKG9uSGFuZCppLnBlcmNlbnQvMTAwKSB9KSk7XG4gIGNvbnN0IHN1bT1yZXMucmVkdWNlKChzLHIpPT5zK3Iuc3VnZ2VzdGVkQW1vdW50LDApOyBsZXQgZGlmZj1vbkhhbmQtc3VtLCBpZHg9MDtcbiAgd2hpbGUoZGlmZj4wICYmIHJlcy5sZW5ndGgpeyByZXNbaWR4JXJlcy5sZW5ndGhdLnN1Z2dlc3RlZEFtb3VudCsrOyBpZHgrKzsgZGlmZi0tOyB9XG4gIHJldHVybiByZXM7XG59XG4iXSwibmFtZXMiOlsicHJpc21hIiwiZ2V0QWN0aXZlRGlzdHJpYnV0aW9uUnVsZSIsIm5vdyIsIkRhdGUiLCJkaXN0cmlidXRpb25SdWxlIiwiZmluZEZpcnN0Iiwid2hlcmUiLCJzdGFydHNBdCIsImx0ZSIsIk9SIiwiZW5kc0F0IiwiZ3QiLCJpbmNsdWRlIiwiaXRlbXMiLCJlbnZlbG9wZSIsIm9yZGVyQnkiLCJjb21wdXRlUHJvcG9zYWwiLCJvbkhhbmQiLCJyZXMiLCJtYXAiLCJpIiwiZW52ZWxvcGVJZCIsIm5hbWUiLCJlbnZlbG9wZU5hbWUiLCJwZXJjZW50Iiwic3VnZ2VzdGVkQW1vdW50IiwiTWF0aCIsImZsb29yIiwic3VtIiwicmVkdWNlIiwicyIsInIiLCJkaWZmIiwiaWR4IiwibGVuZ3RoIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/queries/rules.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/validators/settings.ts":
/*!*******************************************!*\
  !*** ./src/server/validators/settings.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToggleEnvelopeActiveSchema: () => (/* binding */ ToggleEnvelopeActiveSchema),\n/* harmony export */   ToggleEnvelopeProtectedSchema: () => (/* binding */ ToggleEnvelopeProtectedSchema),\n/* harmony export */   ToggleServiceSchema: () => (/* binding */ ToggleServiceSchema),\n/* harmony export */   UpdateDistributionRuleSchema: () => (/* binding */ UpdateDistributionRuleSchema),\n/* harmony export */   UpsertEnvelopeSchema: () => (/* binding */ UpsertEnvelopeSchema),\n/* harmony export */   UpsertServiceSchema: () => (/* binding */ UpsertServiceSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/.pnpm/zod@3.23.8/node_modules/zod/lib/index.mjs\");\n\nconst UpdateDistributionRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    items: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        envelopeId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n        percent: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(0).max(100)\n    })).min(1)\n}).refine((v)=>v.items.reduce((s, i)=>s + i.percent, 0) === 100, \"La somme des pourcentages doit être = 100\");\nconst UpsertEnvelopeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(2),\n    emoji: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(8).optional(),\n    protected: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    active: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    budgetTarget: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(0)\n});\nconst ToggleEnvelopeActiveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    active: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()\n});\nconst ToggleEnvelopeProtectedSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    protected: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()\n});\nconst UpsertServiceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(2),\n    active: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nconst ToggleServiceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    active: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9zZXJ2ZXIvdmFsaWRhdG9ycy9zZXR0aW5ncy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdCO0FBQ2pCLE1BQU1DLCtCQUErQkQsa0NBQUNBLENBQUNFLE1BQU0sQ0FBQztJQUFFQyxPQUFPSCxrQ0FBQ0EsQ0FBQ0ksS0FBSyxDQUFDSixrQ0FBQ0EsQ0FBQ0UsTUFBTSxDQUFDO1FBQUVHLFlBQVdMLGtDQUFDQSxDQUFDTSxNQUFNLEdBQUdDLEdBQUcsQ0FBQztRQUFJQyxTQUFRUixrQ0FBQ0EsQ0FBQ1MsTUFBTSxHQUFHQyxHQUFHLEdBQUdILEdBQUcsQ0FBQyxHQUFHSSxHQUFHLENBQUM7SUFBSyxJQUFJSixHQUFHLENBQUM7QUFBRyxHQUFHSyxNQUFNLENBQUNDLENBQUFBLElBQUlBLEVBQUVWLEtBQUssQ0FBQ1csTUFBTSxDQUFDLENBQUNDLEdBQUVDLElBQUlELElBQUVDLEVBQUVSLE9BQU8sRUFBQyxPQUFLLEtBQUssNkNBQTZDO0FBRW5RLE1BQU1TLHVCQUF1QmpCLGtDQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFBRWdCLElBQUdsQixrQ0FBQ0EsQ0FBQ00sTUFBTSxHQUFHYSxRQUFRO0lBQUlDLE1BQUtwQixrQ0FBQ0EsQ0FBQ00sTUFBTSxHQUFHQyxHQUFHLENBQUM7SUFBSWMsT0FBTXJCLGtDQUFDQSxDQUFDTSxNQUFNLEdBQUdLLEdBQUcsQ0FBQyxHQUFHUSxRQUFRO0lBQUlHLFdBQVV0QixrQ0FBQ0EsQ0FBQ3VCLE9BQU8sR0FBR0osUUFBUTtJQUFJSyxRQUFPeEIsa0NBQUNBLENBQUN1QixPQUFPLEdBQUdKLFFBQVE7SUFBSU0sY0FBY3pCLGtDQUFDQSxDQUFDUyxNQUFNLEdBQUdDLEdBQUcsR0FBR0gsR0FBRyxDQUFDO0FBQUcsR0FBRztBQUN4TyxNQUFNbUIsNkJBQTZCMUIsa0NBQUNBLENBQUNFLE1BQU0sQ0FBQztJQUFFZ0IsSUFBR2xCLGtDQUFDQSxDQUFDTSxNQUFNLEdBQUdDLEdBQUcsQ0FBQztJQUFJaUIsUUFBT3hCLGtDQUFDQSxDQUFDdUIsT0FBTztBQUFHLEdBQUc7QUFDMUYsTUFBTUksZ0NBQWdDM0Isa0NBQUNBLENBQUNFLE1BQU0sQ0FBQztJQUFFZ0IsSUFBR2xCLGtDQUFDQSxDQUFDTSxNQUFNLEdBQUdDLEdBQUcsQ0FBQztJQUFJZSxXQUFVdEIsa0NBQUNBLENBQUN1QixPQUFPO0FBQUcsR0FBRztBQUVoRyxNQUFNSyxzQkFBc0I1QixrQ0FBQ0EsQ0FBQ0UsTUFBTSxDQUFDO0lBQUVnQixJQUFHbEIsa0NBQUNBLENBQUNNLE1BQU0sR0FBR2EsUUFBUTtJQUFJQyxNQUFLcEIsa0NBQUNBLENBQUNNLE1BQU0sR0FBR0MsR0FBRyxDQUFDO0lBQUlpQixRQUFPeEIsa0NBQUNBLENBQUN1QixPQUFPLEdBQUdKLFFBQVE7QUFBRyxHQUFHO0FBQzFILE1BQU1VLHNCQUFzQjdCLGtDQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFBRWdCLElBQUdsQixrQ0FBQ0EsQ0FBQ00sTUFBTSxHQUFHQyxHQUFHLENBQUM7SUFBSWlCLFFBQU94QixrQ0FBQ0EsQ0FBQ3VCLE9BQU87QUFBRyxHQUFHIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJDMjQxXFxNdXNpY1xcZmluYW5jZS1hcHAtdjEtbWFpblxcZmluYW5jZS1hcHAtdjEtbWFpblxcc3JjXFxzZXJ2ZXJcXHZhbGlkYXRvcnNcXHNldHRpbmdzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5leHBvcnQgY29uc3QgVXBkYXRlRGlzdHJpYnV0aW9uUnVsZVNjaGVtYSA9IHoub2JqZWN0KHsgaXRlbXM6IHouYXJyYXkoei5vYmplY3QoeyBlbnZlbG9wZUlkOnouc3RyaW5nKCkubWluKDEpLCBwZXJjZW50OnoubnVtYmVyKCkuaW50KCkubWluKDApLm1heCgxMDApIH0pKS5taW4oMSkgfSkucmVmaW5lKHY9PiB2Lml0ZW1zLnJlZHVjZSgocyxpKT0+cytpLnBlcmNlbnQsMCk9PT0xMDAsIFwiTGEgc29tbWUgZGVzIHBvdXJjZW50YWdlcyBkb2l0IMOqdHJlID0gMTAwXCIpO1xuZXhwb3J0IHR5cGUgVXBkYXRlRGlzdHJpYnV0aW9uUnVsZUlucHV0ID0gei5pbmZlcjx0eXBlb2YgVXBkYXRlRGlzdHJpYnV0aW9uUnVsZVNjaGVtYT47XG5leHBvcnQgY29uc3QgVXBzZXJ0RW52ZWxvcGVTY2hlbWEgPSB6Lm9iamVjdCh7IGlkOnouc3RyaW5nKCkub3B0aW9uYWwoKSwgbmFtZTp6LnN0cmluZygpLm1pbigyKSwgZW1vamk6ei5zdHJpbmcoKS5tYXgoOCkub3B0aW9uYWwoKSwgcHJvdGVjdGVkOnouYm9vbGVhbigpLm9wdGlvbmFsKCksIGFjdGl2ZTp6LmJvb2xlYW4oKS5vcHRpb25hbCgpLCBidWRnZXRUYXJnZXQ6IHoubnVtYmVyKCkuaW50KCkubWluKDApIH0pO1xuZXhwb3J0IGNvbnN0IFRvZ2dsZUVudmVsb3BlQWN0aXZlU2NoZW1hID0gei5vYmplY3QoeyBpZDp6LnN0cmluZygpLm1pbigxKSwgYWN0aXZlOnouYm9vbGVhbigpIH0pO1xuZXhwb3J0IGNvbnN0IFRvZ2dsZUVudmVsb3BlUHJvdGVjdGVkU2NoZW1hID0gei5vYmplY3QoeyBpZDp6LnN0cmluZygpLm1pbigxKSwgcHJvdGVjdGVkOnouYm9vbGVhbigpIH0pO1xuZXhwb3J0IHR5cGUgVXBzZXJ0RW52ZWxvcGVJbnB1dCA9IHouaW5mZXI8dHlwZW9mIFVwc2VydEVudmVsb3BlU2NoZW1hPjtcbmV4cG9ydCBjb25zdCBVcHNlcnRTZXJ2aWNlU2NoZW1hID0gei5vYmplY3QoeyBpZDp6LnN0cmluZygpLm9wdGlvbmFsKCksIG5hbWU6ei5zdHJpbmcoKS5taW4oMiksIGFjdGl2ZTp6LmJvb2xlYW4oKS5vcHRpb25hbCgpIH0pO1xuZXhwb3J0IGNvbnN0IFRvZ2dsZVNlcnZpY2VTY2hlbWEgPSB6Lm9iamVjdCh7IGlkOnouc3RyaW5nKCkubWluKDEpLCBhY3RpdmU6ei5ib29sZWFuKCkgfSk7XG4iXSwibmFtZXMiOlsieiIsIlVwZGF0ZURpc3RyaWJ1dGlvblJ1bGVTY2hlbWEiLCJvYmplY3QiLCJpdGVtcyIsImFycmF5IiwiZW52ZWxvcGVJZCIsInN0cmluZyIsIm1pbiIsInBlcmNlbnQiLCJudW1iZXIiLCJpbnQiLCJtYXgiLCJyZWZpbmUiLCJ2IiwicmVkdWNlIiwicyIsImkiLCJVcHNlcnRFbnZlbG9wZVNjaGVtYSIsImlkIiwib3B0aW9uYWwiLCJuYW1lIiwiZW1vamkiLCJwcm90ZWN0ZWQiLCJib29sZWFuIiwiYWN0aXZlIiwiYnVkZ2V0VGFyZ2V0IiwiVG9nZ2xlRW52ZWxvcGVBY3RpdmVTY2hlbWEiLCJUb2dnbGVFbnZlbG9wZVByb3RlY3RlZFNjaGVtYSIsIlVwc2VydFNlcnZpY2VTY2hlbWEiLCJUb2dnbGVTZXJ2aWNlU2NoZW1hIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/validators/settings.ts\n");

/***/ })

};
;