"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_action-browser_src_server_actions_transactions_ts";
exports.ids = ["_action-browser_src_server_actions_transactions_ts"];
exports.modules = {

/***/ "(action-browser)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentRole: () => (/* binding */ getCurrentRole),\n/* harmony export */   requireRole: () => (/* binding */ requireRole)\n/* harmony export */ });\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(action-browser)/./node_modules/.pnpm/@clerk+nextjs@5.3.1_next@15_20ea36d09dc70bbbcc56b8a0d9ae486b/node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\nasync function getCurrentRole() {\n    if (process.env.E2E_ROLE === \"operator\" || process.env.E2E_ROLE === \"manager\" || process.env.E2E_ROLE === \"auditor\") return process.env.E2E_ROLE;\n    const { userId, sessionClaims } = (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_0__.auth)();\n    if (!userId) throw new Error(\"Unauthenticated\");\n    return sessionClaims?.role ?? \"operator\";\n}\nasync function requireRole(allowed) {\n    const role = await getCurrentRole();\n    if (!allowed.includes(role)) throw new Error(\"Forbidden\");\n    return role;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEM7QUFFckMsZUFBZUM7SUFDcEIsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssY0FBY0YsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssYUFBYUYsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssV0FBVyxPQUFPRixRQUFRQyxHQUFHLENBQUNDLFFBQVE7SUFDaEosTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHTiwwREFBSUE7SUFBSSxJQUFJLENBQUNLLFFBQVEsTUFBTSxJQUFJRSxNQUFNO0lBQ3ZFLE9BQU8sZUFBZ0JDLFFBQTZCO0FBQ3REO0FBQ08sZUFBZUMsWUFBWUMsT0FBZTtJQUFJLE1BQU1GLE9BQU8sTUFBTVA7SUFBa0IsSUFBSSxDQUFDUyxRQUFRQyxRQUFRLENBQUNILE9BQU8sTUFBTSxJQUFJRCxNQUFNO0lBQWMsT0FBT0M7QUFBTSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCQzI0MVxcTXVzaWNcXGZpbmFuY2UtYXBwLXYxLW1haW5cXGZpbmFuY2UtYXBwLXYxLW1haW5cXHNyY1xcbGliXFxhdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF1dGggfSBmcm9tIFwiQGNsZXJrL25leHRqcy9zZXJ2ZXJcIjtcbmV4cG9ydCB0eXBlIFJvbGUgPSBcIm9wZXJhdG9yXCIgfCBcIm1hbmFnZXJcIiB8IFwiYXVkaXRvclwiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEN1cnJlbnRSb2xlKCk6IFByb21pc2U8Um9sZT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuRTJFX1JPTEUgPT09IFwib3BlcmF0b3JcIiB8fCBwcm9jZXNzLmVudi5FMkVfUk9MRSA9PT0gXCJtYW5hZ2VyXCIgfHwgcHJvY2Vzcy5lbnYuRTJFX1JPTEUgPT09IFwiYXVkaXRvclwiKSByZXR1cm4gcHJvY2Vzcy5lbnYuRTJFX1JPTEUgYXMgUm9sZTtcbiAgY29uc3QgeyB1c2VySWQsIHNlc3Npb25DbGFpbXMgfSA9IGF1dGgoKTsgaWYgKCF1c2VySWQpIHRocm93IG5ldyBFcnJvcihcIlVuYXV0aGVudGljYXRlZFwiKTtcbiAgcmV0dXJuIChzZXNzaW9uQ2xhaW1zPy5yb2xlIGFzIFJvbGUgfCB1bmRlZmluZWQpID8/IFwib3BlcmF0b3JcIjtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1aXJlUm9sZShhbGxvd2VkOiBSb2xlW10pIHsgY29uc3Qgcm9sZSA9IGF3YWl0IGdldEN1cnJlbnRSb2xlKCk7IGlmICghYWxsb3dlZC5pbmNsdWRlcyhyb2xlKSkgdGhyb3cgbmV3IEVycm9yKFwiRm9yYmlkZGVuXCIpOyByZXR1cm4gcm9sZTsgfVxuIl0sIm5hbWVzIjpbImF1dGgiLCJnZXRDdXJyZW50Um9sZSIsInByb2Nlc3MiLCJlbnYiLCJFMkVfUk9MRSIsInVzZXJJZCIsInNlc3Npb25DbGFpbXMiLCJFcnJvciIsInJvbGUiLCJyZXF1aXJlUm9sZSIsImFsbG93ZWQiLCJpbmNsdWRlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(action-browser)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = global.__prisma ??= new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) global.__prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQVN2QyxNQUFNQyxTQUFVQyxPQUFPQyxRQUFRLEtBQUssSUFBSUgsd0RBQVlBLEdBQUk7QUFDL0QsSUFBSUksSUFBcUMsRUFBRUYsT0FBT0MsUUFBUSxHQUFHRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCQzI0MVxcTXVzaWNcXGZpbmFuY2UtYXBwLXYxLW1haW5cXGZpbmFuY2UtYXBwLXYxLW1haW5cXHNyY1xcbGliXFxwcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBFbnN1cmUgYSBzaW5nbGUgUHJpc21hQ2xpZW50IGluc3RhbmNlIGluIGRldmVsb3BtZW50IHRvIGF2b2lkIGV4aGF1c3Rpbmdcbi8vIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGR1cmluZyBITVIgKHNlZSBQcmlzbWEgZG9jcykuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIF9fcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPSAoZ2xvYmFsLl9fcHJpc21hID8/PSBuZXcgUHJpc21hQ2xpZW50KCkpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbC5fX3ByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJfX3ByaXNtYSIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/actions/transactions.ts":
/*!********************************************!*\
  !*** ./src/server/actions/transactions.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExpense: () => (/* binding */ createExpense),\n/* harmony export */   createExpenseForm: () => (/* binding */ createExpenseForm),\n/* harmony export */   createIncome: () => (/* binding */ createIncome),\n/* harmony export */   createTransfer: () => (/* binding */ createTransfer)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-server-reference */ \"(action-browser)/./node_modules/.pnpm/next@15.0.3_@playwright+tes_c0fbebec67a33fb30e42c14d3a81a9d2/node_modules/next/dist/build/webpack/loaders/next-flight-loader/server-reference.js\");\n/* harmony import */ var private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! private-next-rsc-action-encryption */ \"(action-browser)/./node_modules/.pnpm/next@15.0.3_@playwright+tes_c0fbebec67a33fb30e42c14d3a81a9d2/node_modules/next/dist/server/app-render/encryption.js\");\n/* harmony import */ var private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(action-browser)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/auth */ \"(action-browser)/./src/lib/auth.ts\");\n/* harmony import */ var _server_validators_transactions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/server/validators/transactions */ \"(action-browser)/./src/server/validators/transactions.ts\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/.pnpm/zod@3.23.8/node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_queries_envelopes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/server/queries/envelopes */ \"(action-browser)/./src/server/queries/envelopes.ts\");\n/* harmony import */ var private_next_rsc_action_validate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! private-next-rsc-action-validate */ \"(action-browser)/./node_modules/.pnpm/next@15.0.3_@playwright+tes_c0fbebec67a33fb30e42c14d3a81a9d2/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-validate.js\");\n/* __next_internal_action_entry_do_not_use__ {\"4072c2ed01f650f13b1e26f5192428aca79f15dade\":\"createExpenseForm\",\"4074222edd5ce33cb6195a2680994a71d6a8ebca01\":\"createIncome\",\"40a9da69e30072e002e828b95592a27675a27bd63f\":\"createExpense\",\"40b351b61e3fe4f8f694a0367795adfe24b7170a08\":\"createTransfer\"} */ \n\n\n\n\n\n\nasync function createIncome(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\"\n    ]);\n    const parsed = _server_validators_transactions__WEBPACK_IMPORTED_MODULE_4__.CreateIncomeSchema.safeParse(input);\n    if (!parsed.success) throw new Error(parsed.error.errors.map((e)=>e.message).join(\"; \"));\n    const tx = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transaction.create({\n        data: {\n            kind: \"IN\",\n            label: \"Entr√©e\",\n            amount: parsed.data.amount,\n            at: new Date(),\n            serviceId: parsed.data.serviceId\n        }\n    });\n    return {\n        transactionId: tx.id\n    };\n}\nasync function createExpense(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\"\n    ]);\n    const parsed = _server_validators_transactions__WEBPACK_IMPORTED_MODULE_4__.CreateExpenseSchema.safeParse(input);\n    if (!parsed.success) throw new Error(parsed.error.errors.map((e)=>e.message).join(\"; \"));\n    // Charger enveloppes pour validations simples (existence / active / protected)\n    const envIds = parsed.data.allocations.map((a)=>a.envelopeId);\n    const envWithTypes = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findMany({\n        where: {\n            id: {\n                in: envIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            protected: true,\n            active: true\n        }\n    });\n    const map = new Map(envWithTypes.map((e)=>[\n            e.id,\n            e\n        ]));\n    const balances = await (0,_server_queries_envelopes__WEBPACK_IMPORTED_MODULE_5__.getAllEnvelopeBalances)();\n    const envs = envWithTypes.map((e)=>({\n            id: e.id,\n            name: e.name,\n            protected: e.protected,\n            active: e.active\n        }));\n    const envMap = new Map(envs.map((e)=>[\n            e.id,\n            e\n        ]));\n    const balMap = new Map(balances.map((b)=>[\n            b.envelopeId,\n            b.balance\n        ]));\n    const anomalies = [];\n    for (const a of parsed.data.allocations){\n        const env = envMap.get(a.envelopeId);\n        if (!env) throw new Error(\"Enveloppe inconnue\");\n        if (!env.active) throw new Error(`Enveloppe ${env.name} inactive`);\n        const available = balMap.get(a.envelopeId) ?? 0;\n        if (env.protected && !parsed.data.allowOverride) throw new Error(`Enveloppe prot√©g√©e (${env.name}) ‚Äî d√©rogation requise`);\n        if (env.protected && parsed.data.allowOverride) anomalies.push({\n            level: \"critical\",\n            code: \"PROTECTED_ENVELOPE_USED\",\n            details: `D√©pense sur enveloppe prot√©g√©e (${env.name})`\n        });\n        if (a.amount > available) {\n            if (!parsed.data.allowOverride) throw new Error(`Allocation > solde (${env.name})`);\n            anomalies.push({\n                level: \"warning\",\n                code: \"NEGATIVE_BALANCE\",\n                details: `Allocation ${a.amount} > solde ${available} sur ${env.name}`\n            });\n        }\n    }\n    const tx = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transaction.create({\n        data: {\n            kind: \"OUT\",\n            label: \"D√©pense\",\n            amount: parsed.data.total,\n            at: new Date()\n        }\n    });\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transactionAllocation.createMany({\n        data: parsed.data.allocations.map((a)=>({\n                transactionId: tx.id,\n                envelopeId: a.envelopeId,\n                amount: a.amount\n            }))\n    });\n    if (anomalies.length) {\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.anomaly.createMany({\n            data: anomalies.map((an)=>({\n                    level: an.level,\n                    code: an.code,\n                    details: parsed.data.overrideReason ? `${an.details} ‚Äî Raison: ${parsed.data.overrideReason}` : an.details,\n                    transactionId: tx.id\n                }))\n        });\n    }\n    return {\n        transactionId: tx.id,\n        anomalies\n    };\n}\nasync function createTransfer(input) {\n    await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_3__.requireRole)([\n        \"operator\",\n        \"manager\"\n    ]);\n    const Schema = zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        fromEnvelopeId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().min(1),\n        toEnvelopeId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().min(1),\n        amount: zod__WEBPACK_IMPORTED_MODULE_6__.z.number().int().positive(),\n        allowOverride: zod__WEBPACK_IMPORTED_MODULE_6__.z.boolean().optional(),\n        reason: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().max(500).optional()\n    });\n    const p = Schema.safeParse(input);\n    if (!p.success) throw new Error(p.error.errors.map((e)=>e.message).join('; '));\n    const { fromEnvelopeId, toEnvelopeId, amount, allowOverride, reason } = p.data;\n    if (fromEnvelopeId === toEnvelopeId) throw new Error(\"Les enveloppes source et destination doivent √™tre diff√©rentes\");\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.envelope.findMany({\n        where: {\n            id: {\n                in: [\n                    fromEnvelopeId,\n                    toEnvelopeId\n                ]\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            protected: true,\n            active: true\n        }\n    });\n    const envMap = new Map(envs.map((e)=>[\n            e.id,\n            e\n        ]));\n    const fromEnv = envMap.get(fromEnvelopeId);\n    const toEnv = envMap.get(toEnvelopeId);\n    if (!fromEnv) throw new Error(\"Enveloppe source introuvable\");\n    if (!toEnv) throw new Error(\"Enveloppe destination introuvable\");\n    if (!fromEnv.active) throw new Error(`Enveloppe source (${fromEnv.name}) inactive`);\n    if (!toEnv.active) throw new Error(`Enveloppe destination (${toEnv.name}) inactive`);\n    const balances = await (0,_server_queries_envelopes__WEBPACK_IMPORTED_MODULE_5__.getAllEnvelopeBalances)();\n    const balMap = new Map(balances.map((b)=>[\n            b.envelopeId,\n            b.balance\n        ]));\n    const available = balMap.get(fromEnvelopeId) ?? 0;\n    const anomalies = [];\n    if (fromEnv.protected && !allowOverride) throw new Error(`Enveloppe prot√©g√©e (${fromEnv.name}) ‚Äî d√©rogation requise`);\n    if (amount > available) {\n        if (!allowOverride) throw new Error(`Montant > solde disponible (${fromEnv.name})`);\n        anomalies.push({\n            level: 'warning',\n            code: 'NEGATIVE_BALANCE_TRANSFER',\n            details: `Transfert ${amount} > solde ${available} depuis ${fromEnv.name}`\n        });\n    }\n    // Create OUT transaction (debit from source)\n    const outTx = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transaction.create({\n        data: {\n            kind: 'OUT',\n            label: `Transfert vers ${toEnv.name}`,\n            amount,\n            at: new Date()\n        }\n    });\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transactionAllocation.create({\n        data: {\n            transactionId: outTx.id,\n            envelopeId: fromEnvelopeId,\n            amount\n        }\n    });\n    // Create IN transaction (credit to destination)\n    const inTx = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transaction.create({\n        data: {\n            kind: 'IN',\n            label: `Transfert depuis ${fromEnv.name}`,\n            amount,\n            at: new Date()\n        }\n    });\n    await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.transactionAllocation.create({\n        data: {\n            transactionId: inTx.id,\n            envelopeId: toEnvelopeId,\n            amount\n        }\n    });\n    if (anomalies.length) {\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.prisma.anomaly.createMany({\n            data: anomalies.map((a)=>({\n                    level: a.level,\n                    code: a.code,\n                    details: a.details + (reason ? ` ‚Äî Raison: ${reason}` : ''),\n                    transactionId: outTx.id\n                }))\n        });\n    }\n    return {\n        outTransactionId: outTx.id,\n        inTransactionId: inTx.id,\n        anomalies\n    };\n}\n// Adapter to accept a FormData from a form[action] submission.\nasync function createExpenseForm(formData) {\n    // Parse structured form fields:\n    // total, allowOverride, overrideReason, allocations[i].envelopeId, allocations[i].amount\n    const totalRaw = formData.get('total');\n    const total = totalRaw ? Number(totalRaw) : 0;\n    const allowOverride = formData.get('allowOverride') === 'on' || formData.get('allowOverride') === 'true';\n    const overrideReason = String(formData.get('overrideReason') ?? \"\");\n    // Collect allocations by scanning keys like allocations[0].envelopeId and allocations[0].amount\n    const allocations = [];\n    for (const key of Array.from(formData.keys())){\n        const m = key.match(/^allocations\\[(\\d+)\\]\\.(envelopeId|amount)$/);\n        if (m) {\n            const idx = Number(m[1]);\n            const field = m[2];\n            allocations[idx] = allocations[idx] ?? {\n                envelopeId: \"\",\n                amount: 0\n            };\n            const val = formData.get(key);\n            if (field === 'envelopeId') allocations[idx].envelopeId = String(val ?? \"\");\n            if (field === 'amount') allocations[idx].amount = Number(val ?? 0);\n        }\n    }\n    // Filter out empty allocation slots\n    const allocsFiltered = allocations.filter((a)=>a && a.envelopeId && Number(a.amount) > 0);\n    const input = {\n        total,\n        allocations: allocsFiltered,\n        allowOverride,\n        overrideReason\n    };\n    return createExpense(input);\n}\n\n(0,private_next_rsc_action_validate__WEBPACK_IMPORTED_MODULE_7__.ensureServerEntryExports)([\n    createIncome,\n    createExpense,\n    createTransfer,\n    createExpenseForm\n]);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(createIncome, \"4074222edd5ce33cb6195a2680994a71d6a8ebca01\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(createExpense, \"40a9da69e30072e002e828b95592a27675a27bd63f\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(createTransfer, \"40b351b61e3fe4f8f694a0367795adfe24b7170a08\", null);\n(0,private_next_rsc_server_reference__WEBPACK_IMPORTED_MODULE_0__.registerServerReference)(createExpenseForm, \"4072c2ed01f650f13b1e26f5192428aca79f15dade\", null);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/actions/transactions.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/queries/envelopes.ts":
/*!*****************************************!*\
  !*** ./src/server/queries/envelopes.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllEnvelopeBalances: () => (/* binding */ getAllEnvelopeBalances),\n/* harmony export */   getBlockedEnvelopeCoverage: () => (/* binding */ getBlockedEnvelopeCoverage),\n/* harmony export */   getEnvelopeCoverageAll: () => (/* binding */ getEnvelopeCoverageAll)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(action-browser)/./src/lib/prisma.ts\");\n\nasync function getAllEnvelopeBalances() {\n    // Only consider active envelopes for balances shown in the app (dashboard, lists)\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.envelope.findMany({\n        where: {\n            active: true\n        },\n        select: {\n            id: true,\n            name: true,\n            protected: true,\n            active: true,\n            emoji: true,\n            budgetTarget: true\n        }\n    });\n    const dist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            \"envelopeId\"\n        ],\n        _sum: {\n            amount: true\n        },\n        where: {\n            transaction: {\n                kind: \"DIST\"\n            }\n        }\n    });\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            \"envelopeId\"\n        ],\n        _sum: {\n            amount: true\n        },\n        where: {\n            transaction: {\n                kind: \"OUT\"\n            }\n        }\n    });\n    const mapD = new Map(dist.map((d)=>[\n            d.envelopeId,\n            d._sum.amount ?? 0\n        ]));\n    const mapO = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    return envs.map((e)=>{\n        const inflow = mapD.get(e.id) ?? 0, outflow = mapO.get(e.id) ?? 0;\n        const total = typeof e.budgetTarget === 'number' ? e.budgetTarget : inflow;\n        const balance = total - outflow;\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            protected: e.protected,\n            active: e.active,\n            emoji: e.emoji ?? null,\n            budgetTarget: e.budgetTarget ?? null,\n            inflow,\n            outflow,\n            balance\n        };\n    });\n}\n// Retourne la couverture (en mois) des enveloppes class√©es \"blocked\" ou prot√©g√©es.\nasync function getBlockedEnvelopeCoverage() {\n    const now = new Date();\n    const daysWindow = 90; // use last 90 days to compute average\n    const since = new Date(now.getTime() - daysWindow * 24 * 3600 * 1000);\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.envelope.findMany({\n        where: {\n            active: true,\n            OR: [\n                {\n                    protected: true\n                },\n                {\n                    classification: 'blocked'\n                }\n            ]\n        },\n        select: {\n            id: true,\n            name: true,\n            emoji: true,\n            budgetTarget: true\n        }\n    });\n    if (envs.length === 0) return [];\n    const ids = envs.map((e)=>e.id);\n    // sum of OUT amounts over the window\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT',\n                at: {\n                    gte: since\n                }\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outMap = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    // current balances using existing helper logic: inflow/outflow all-time\n    const dist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'DIST'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outsAll = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const distMap = new Map(dist.map((d)=>[\n            d.envelopeId,\n            d._sum.amount ?? 0\n        ]));\n    const outsAllMap = new Map(outsAll.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const res = envs.map((e)=>{\n        const allocated = distMap.get(e.id) ?? 0;\n        const spentAll = outsAllMap.get(e.id) ?? 0;\n        const balance = (typeof e.budgetTarget === 'number' ? e.budgetTarget : allocated) - spentAll;\n        const outLast90 = outMap.get(e.id) ?? 0;\n        const avgMonthly = outLast90 / daysWindow * 30; // approximate month\n        const months = avgMonthly > 0 ? Number((balance / avgMonthly).toFixed(1)) : balance > 0 ? Infinity : 0;\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            emoji: e.emoji ?? null,\n            balance,\n            avgMonthly: Math.round(avgMonthly),\n            monthsCoverage: months\n        };\n    });\n    return res;\n}\n// Retourne la couverture (en mois) pour toutes les enveloppes actives.\nasync function getEnvelopeCoverageAll(options) {\n    const daysWindow = options?.daysWindow ?? 90;\n    const now = new Date();\n    const since = new Date(now.getTime() - daysWindow * 24 * 3600 * 1000);\n    const envs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.envelope.findMany({\n        where: {\n            active: true\n        },\n        select: {\n            id: true,\n            name: true,\n            emoji: true,\n            budgetTarget: true\n        }\n    });\n    if (envs.length === 0) return [];\n    const ids = envs.map((e)=>e.id);\n    const outs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT',\n                at: {\n                    gte: since\n                }\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outMap = new Map(outs.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const dist = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'DIST'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const outsAll = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.transactionAllocation.groupBy({\n        by: [\n            'envelopeId'\n        ],\n        where: {\n            envelopeId: {\n                in: ids\n            },\n            transaction: {\n                kind: 'OUT'\n            }\n        },\n        _sum: {\n            amount: true\n        }\n    });\n    const distMap = new Map(dist.map((d)=>[\n            d.envelopeId,\n            d._sum.amount ?? 0\n        ]));\n    const outsAllMap = new Map(outsAll.map((o)=>[\n            o.envelopeId,\n            o._sum.amount ?? 0\n        ]));\n    const res = envs.map((e)=>{\n        const allocated = distMap.get(e.id) ?? 0;\n        const spentAll = outsAllMap.get(e.id) ?? 0;\n        const balance = (typeof e.budgetTarget === 'number' ? e.budgetTarget : allocated) - spentAll;\n        const outLast = outMap.get(e.id) ?? 0;\n        const avgMonthly = outLast / daysWindow * 30;\n        const months = avgMonthly > 0 ? Number((balance / avgMonthly).toFixed(1)) : balance > 0 ? Infinity : 0;\n        return {\n            envelopeId: e.id,\n            name: e.name,\n            emoji: e.emoji ?? null,\n            balance,\n            avgMonthly: Math.round(avgMonthly),\n            monthsCoverage: months\n        };\n    });\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/queries/envelopes.ts\n");

/***/ }),

/***/ "(action-browser)/./src/server/validators/transactions.ts":
/*!***********************************************!*\
  !*** ./src/server/validators/transactions.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateExpenseSchema: () => (/* binding */ CreateExpenseSchema),\n/* harmony export */   CreateIncomeSchema: () => (/* binding */ CreateIncomeSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/.pnpm/zod@3.23.8/node_modules/zod/lib/index.mjs\");\n\nconst CreateIncomeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    serviceId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    amount: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive(),\n    note: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(500).optional()\n});\nconst CreateExpenseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    total: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive(),\n    allocations: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        envelopeId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n        amount: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive()\n    })).min(1),\n    allowOverride: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    overrideReason: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(500).optional()\n}).refine((v)=>v.allocations.reduce((s, a)=>s + a.amount, 0) === v.total, \"Somme des allocations ‚â† total\").refine((v)=>!v.allowOverride || v.overrideReason && v.overrideReason.trim().length >= 5, \"overrideReason (‚â• 5 caract√®res) requis si allowOverride = true\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL3NyYy9zZXJ2ZXIvdmFsaWRhdG9ycy90cmFuc2FjdGlvbnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdCO0FBQ2pCLE1BQU1DLHFCQUFxQkQsa0NBQUNBLENBQUNFLE1BQU0sQ0FBQztJQUFFQyxXQUFXSCxrQ0FBQ0EsQ0FBQ0ksTUFBTSxHQUFHQyxHQUFHLENBQUM7SUFBSUMsUUFBUU4sa0NBQUNBLENBQUNPLE1BQU0sR0FBR0MsR0FBRyxHQUFHQyxRQUFRO0lBQUlDLE1BQU1WLGtDQUFDQSxDQUFDSSxNQUFNLEdBQUdPLEdBQUcsQ0FBQyxLQUFLQyxRQUFRO0FBQUcsR0FBRztBQUNqSixNQUFNQyxzQkFBc0JiLGtDQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFDMUNZLE9BQU9kLGtDQUFDQSxDQUFDTyxNQUFNLEdBQUdDLEdBQUcsR0FBR0MsUUFBUTtJQUNoQ00sYUFBYWYsa0NBQUNBLENBQUNnQixLQUFLLENBQUNoQixrQ0FBQ0EsQ0FBQ0UsTUFBTSxDQUFDO1FBQUVlLFlBQVdqQixrQ0FBQ0EsQ0FBQ0ksTUFBTSxHQUFHQyxHQUFHLENBQUM7UUFBSUMsUUFBT04sa0NBQUNBLENBQUNPLE1BQU0sR0FBR0MsR0FBRyxHQUFHQyxRQUFRO0lBQUcsSUFBSUosR0FBRyxDQUFDO0lBQ3pHYSxlQUFlbEIsa0NBQUNBLENBQUNtQixPQUFPLEdBQUdQLFFBQVE7SUFBSVEsZ0JBQWdCcEIsa0NBQUNBLENBQUNJLE1BQU0sR0FBR08sR0FBRyxDQUFDLEtBQUtDLFFBQVE7QUFDckYsR0FBR1MsTUFBTSxDQUFDQyxDQUFBQSxJQUFJQSxFQUFFUCxXQUFXLENBQUNRLE1BQU0sQ0FBQyxDQUFDQyxHQUFFQyxJQUFJRCxJQUFFQyxFQUFFbkIsTUFBTSxFQUFDLE9BQUtnQixFQUFFUixLQUFLLEVBQUUsaUNBQ2pFTyxNQUFNLENBQUNDLENBQUFBLElBQUksQ0FBQ0EsRUFBRUosYUFBYSxJQUFLSSxFQUFFRixjQUFjLElBQUlFLEVBQUVGLGNBQWMsQ0FBQ00sSUFBSSxHQUFHQyxNQUFNLElBQUUsR0FBSSxrRUFBa0UiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQkMyNDFcXE11c2ljXFxmaW5hbmNlLWFwcC12MS1tYWluXFxmaW5hbmNlLWFwcC12MS1tYWluXFxzcmNcXHNlcnZlclxcdmFsaWRhdG9yc1xcdHJhbnNhY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5leHBvcnQgY29uc3QgQ3JlYXRlSW5jb21lU2NoZW1hID0gei5vYmplY3QoeyBzZXJ2aWNlSWQ6IHouc3RyaW5nKCkubWluKDEpLCBhbW91bnQ6IHoubnVtYmVyKCkuaW50KCkucG9zaXRpdmUoKSwgbm90ZTogei5zdHJpbmcoKS5tYXgoNTAwKS5vcHRpb25hbCgpIH0pO1xuZXhwb3J0IGNvbnN0IENyZWF0ZUV4cGVuc2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHRvdGFsOiB6Lm51bWJlcigpLmludCgpLnBvc2l0aXZlKCksXG4gIGFsbG9jYXRpb25zOiB6LmFycmF5KHoub2JqZWN0KHsgZW52ZWxvcGVJZDp6LnN0cmluZygpLm1pbigxKSwgYW1vdW50OnoubnVtYmVyKCkuaW50KCkucG9zaXRpdmUoKSB9KSkubWluKDEpLFxuICBhbGxvd092ZXJyaWRlOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLCBvdmVycmlkZVJlYXNvbjogei5zdHJpbmcoKS5tYXgoNTAwKS5vcHRpb25hbCgpXG59KS5yZWZpbmUodj0+IHYuYWxsb2NhdGlvbnMucmVkdWNlKChzLGEpPT5zK2EuYW1vdW50LDApPT09di50b3RhbCwgXCJTb21tZSBkZXMgYWxsb2NhdGlvbnMg4omgIHRvdGFsXCJcbikucmVmaW5lKHY9PiAhdi5hbGxvd092ZXJyaWRlIHx8ICh2Lm92ZXJyaWRlUmVhc29uICYmIHYub3ZlcnJpZGVSZWFzb24udHJpbSgpLmxlbmd0aD49NSksIFwib3ZlcnJpZGVSZWFzb24gKOKJpSA1IGNhcmFjdMOocmVzKSByZXF1aXMgc2kgYWxsb3dPdmVycmlkZSA9IHRydWVcIik7XG4iXSwibmFtZXMiOlsieiIsIkNyZWF0ZUluY29tZVNjaGVtYSIsIm9iamVjdCIsInNlcnZpY2VJZCIsInN0cmluZyIsIm1pbiIsImFtb3VudCIsIm51bWJlciIsImludCIsInBvc2l0aXZlIiwibm90ZSIsIm1heCIsIm9wdGlvbmFsIiwiQ3JlYXRlRXhwZW5zZVNjaGVtYSIsInRvdGFsIiwiYWxsb2NhdGlvbnMiLCJhcnJheSIsImVudmVsb3BlSWQiLCJhbGxvd092ZXJyaWRlIiwiYm9vbGVhbiIsIm92ZXJyaWRlUmVhc29uIiwicmVmaW5lIiwidiIsInJlZHVjZSIsInMiLCJhIiwidHJpbSIsImxlbmd0aCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./src/server/validators/transactions.ts\n");

/***/ })

};
;